esphome:
  name: curtain
  friendly_name: curtain
  platform: ESP8266
  esp8266_restore_from_flash: False
  board: d1_mini
  includes:
    - fyrtur_sensors.h

# Enable logging
logger:

# Enable Home Assistant API
api:
  encryption:
    key: !secret api_key

# Enable OTA Updates
ota:
  - platform: esphome
    password: !secret esphome_secret


# Wifi Default Config
wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password
  fast_connect: on
  power_save_mode: HIGH

uart:
  - id: blinds_uart
    baud_rate: 2400
    data_bits: 8
    parity: NONE
    stop_bits: 1
    rx_buffer_size: 1024
    tx_pin: D6
    rx_pin: D5

# I did not like the blinking, so I disconnected the cable
#status_led:
#  pin:
#    number: D3
#    inverted: False
#  id: led_status

binary_sensor:

  - platform: gpio
    pin:
      number: D4
      mode: INPUT_PULLUP
      inverted: True
    id: "button_up"
    on_press:
      - switch.toggle: switch_up
    
  - platform: gpio
    pin:
      number: D2
      mode: INPUT_PULLUP
      inverted: True
    id: "button_down"
    on_press:
      - switch.toggle: switch_down

sensor:
  - platform: custom
    lambda: |-
      auto blinds_status = new Blindsstatus(id(blinds_uart));
      App.register_component(blinds_status);
      return {blinds_status->battery_sensor,blinds_status->voltage_sensor,blinds_status->speed_sensor,blinds_status->position_sensor};

    sensors:
    - name: "Battery"
      unit_of_measurement: "%"

    - name: "Voltage"
      unit_of_measurement: V
      filters:
        - lambda: return x / 31;
      accuracy_decimals: 2

    - name: "Speed"
      unit_of_measurement: rpm
      id: blinds_speed
      internal: true

    - name: "Position"
      unit_of_measurement: "%"
      id: blinds_position
      internal: true



switch:
# Commands: https://github.com/mjuhanne/fyrtur-motor-board
  - platform: uart
    name: "Stop"
    id: switch_stop
    data: [0x00, 0xff, 0x9a, 0x0a, 0xcc, 0xc6]
    uart_id: blinds_uart
    internal: true

  - platform: uart
    name: "Up"
    id: switch_up
    icon: mdi:arrow-up-bold
    data: [0x00, 0xff, 0x9a, 0x0a, 0xdd, 0xd7]
    uart_id: blinds_uart
    internal: true

  - platform: uart
    name: "Down"
    id: switch_down
    icon: mdi:arrow-down-bold
    data: [0x00, 0xff, 0x9a, 0x0a, 0xee, 0xe4]
    uart_id: blinds_uart
    internal: true

  - platform: uart
    name: "Set Max Curtain Length"
    id: switch_set_max
    data: [0x00, 0xff, 0x9a, 0xfa, 0xee, 0x14]
    uart_id: blinds_uart

  - platform: uart
    name: "Set Full Curtain Length"
    id: switch_reset_full
    data: [0x00, 0xff, 0x9a, 0xfa, 0xcc, 0x36]
    uart_id: blinds_uart

  - platform: uart
    name: "Reset Curtain Length"
    id: switch_reset
    data: [0x00, 0xff, 0x9a, 0xfa, 0x00, 0xfa]
    uart_id: blinds_uart

  - platform: uart
    name: "Get Status"
    id: switch_get_status
    data: [0x00, 0xff, 0x9a, 0xcc, 0xcc, 0x00]
    uart_id: blinds_uart
    internal: true

cover:
  - platform: template
    name: "Curtain"
    has_position: true
    id: blinds_cover
    lambda: return abs((id(blinds_position).state / 100) - 1);

    open_action:
      - switch.toggle: switch_up
      - cover.template.publish:
          id: blinds_cover
          current_operation: OPENING
      - script.execute: status_loop
    
    stop_action:
      - switch.toggle: switch_stop
      - script.execute: status_loop

    close_action:
      - switch.toggle: switch_down
      - cover.template.publish:
          id: blinds_cover
          current_operation: CLOSING
      - script.execute: status_loop
    
    position_action: 
      - cover.template.publish:
          id: blinds_cover
          current_operation: !lambda |-
                                if ((1 - pos) * 100 > id(blinds_position).state) {
                                  return COVER_OPERATION_CLOSING;
                                } else {
                                  return COVER_OPERATION_OPENING;
                                }
      - uart.write: !lambda |-
                        byte set_position = (1 - pos) * 100;
                        byte checksum = 0xdd ^ set_position;
                        return {0x00, 0xff, 0x9a, 0xdd, set_position, checksum};
      - script.execute: status_loop

script:
  - id: status_loop
    mode: queued
    then:
      - switch.toggle: switch_get_status
      - delay: 250ms
      - switch.toggle: switch_get_status
      - delay: 250ms
      - switch.toggle: switch_get_status
      - delay: 250ms
      - switch.toggle: switch_get_status
      - delay: 250ms
      - if:
          condition:
            lambda: return id(blinds_speed).state > 0;
          then:
            - script.execute: status_loop
          else:
            - cover.template.publish:
                id: blinds_cover
                current_operation: IDLE